{"ast":null,"code":"import { useState, useRef, useEffect, useCallback } from 'react';\nimport { noop } from '../utils/noop.js';\nconst config = {\n  root: null,\n  rootMargin: \"0px 0px 0px 0px\",\n  threshold: [0, 1]\n};\n/**\r\n *\r\n * useIntersectionObserverRef hook\r\n *\r\n * Returns a mutation observer for a React Ref and fires a callback\r\n *\r\n * @param {IntersectionObserverCallback} callback Function that needs to be fired on mutation\r\n * @param {IntersectionObserverInit} options\r\n * @see https://rooks.vercel.app/docs/useIntersectionObserverRef\r\n */\nfunction useIntersectionObserverRef(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config;\n  const {\n    root = null,\n    rootMargin,\n    threshold\n  } = options;\n  const [node, setNode] = useState(null);\n  const callbackRef = useRef(callback);\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n  const handleIntersectionObserver = useCallback(function () {\n    var _a;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef, ...args);\n  }, []);\n  useEffect(() => {\n    // Create an observer instance linked to the callback function\n    if (node) {\n      const observer = new IntersectionObserver(handleIntersectionObserver, {\n        root,\n        rootMargin,\n        threshold\n      });\n      // Start observing the target node for configured mutations\n      observer.observe(node);\n      return () => {\n        observer.disconnect();\n      };\n    }\n    return noop;\n  }, [node, handleIntersectionObserver, root, rootMargin, threshold]);\n  const ref = useCallback(nodeElement => {\n    setNode(nodeElement);\n  }, []);\n  return [ref];\n}\nexport { useIntersectionObserverRef };","map":{"version":3,"names":["useState","useRef","useEffect","useCallback","noop","config","root","rootMargin","threshold","useIntersectionObserverRef","callback","options","node","setNode","callbackRef","current","handleIntersectionObserver","_a","args","call","observer","IntersectionObserver","observe","disconnect","ref","nodeElement"],"sources":["/Users/Professional/Documents/Score_Keeper/frontend/node_modules/rooks/dist/esm/hooks/useIntersectionObserverRef.js"],"sourcesContent":["import { useState, useRef, useEffect, useCallback } from 'react';\nimport { noop } from '../utils/noop.js';\n\nconst config = {\r\n    root: null,\r\n    rootMargin: \"0px 0px 0px 0px\",\r\n    threshold: [0, 1],\r\n};\r\n/**\r\n *\r\n * useIntersectionObserverRef hook\r\n *\r\n * Returns a mutation observer for a React Ref and fires a callback\r\n *\r\n * @param {IntersectionObserverCallback} callback Function that needs to be fired on mutation\r\n * @param {IntersectionObserverInit} options\r\n * @see https://rooks.vercel.app/docs/useIntersectionObserverRef\r\n */\r\nfunction useIntersectionObserverRef(callback, options = config) {\r\n    const { root = null, rootMargin, threshold } = options;\r\n    const [node, setNode] = useState(null);\r\n    const callbackRef = useRef(callback);\r\n    useEffect(() => {\r\n        callbackRef.current = callback;\r\n    });\r\n    const handleIntersectionObserver = useCallback((...args) => {\r\n        var _a;\r\n        return (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef, ...args);\r\n    }, []);\r\n    useEffect(() => {\r\n        // Create an observer instance linked to the callback function\r\n        if (node) {\r\n            const observer = new IntersectionObserver(handleIntersectionObserver, {\r\n                root,\r\n                rootMargin,\r\n                threshold,\r\n            });\r\n            // Start observing the target node for configured mutations\r\n            observer.observe(node);\r\n            return () => {\r\n                observer.disconnect();\r\n            };\r\n        }\r\n        return noop;\r\n    }, [node, handleIntersectionObserver, root, rootMargin, threshold]);\r\n    const ref = useCallback((nodeElement) => {\r\n        setNode(nodeElement);\r\n    }, []);\r\n    return [ref];\r\n}\n\nexport { useIntersectionObserverRef };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAChE,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,MAAMC,MAAM,GAAG;EACXC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,iBAAiB;EAC7BC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,0BAA0B,CAACC,QAAQ,EAAoB;EAAA,IAAlBC,OAAO,uEAAGN,MAAM;EAC1D,MAAM;IAAEC,IAAI,GAAG,IAAI;IAAEC,UAAU;IAAEC;EAAU,CAAC,GAAGG,OAAO;EACtD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAMc,WAAW,GAAGb,MAAM,CAACS,QAAQ,CAAC;EACpCR,SAAS,CAAC,MAAM;IACZY,WAAW,CAACC,OAAO,GAAGL,QAAQ;EAClC,CAAC,CAAC;EACF,MAAMM,0BAA0B,GAAGb,WAAW,CAAC,YAAa;IACxD,IAAIc,EAAE;IAAC,kCADwCC,IAAI;MAAJA,IAAI;IAAA;IAEnD,OAAO,CAACD,EAAE,GAAGH,WAAW,CAACC,OAAO,MAAM,IAAI,IAAIE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,IAAI,CAACL,WAAW,EAAE,GAAGI,IAAI,CAAC;EACxG,CAAC,EAAE,EAAE,CAAC;EACNhB,SAAS,CAAC,MAAM;IACZ;IACA,IAAIU,IAAI,EAAE;MACN,MAAMQ,QAAQ,GAAG,IAAIC,oBAAoB,CAACL,0BAA0B,EAAE;QAClEV,IAAI;QACJC,UAAU;QACVC;MACJ,CAAC,CAAC;MACF;MACAY,QAAQ,CAACE,OAAO,CAACV,IAAI,CAAC;MACtB,OAAO,MAAM;QACTQ,QAAQ,CAACG,UAAU,EAAE;MACzB,CAAC;IACL;IACA,OAAOnB,IAAI;EACf,CAAC,EAAE,CAACQ,IAAI,EAAEI,0BAA0B,EAAEV,IAAI,EAAEC,UAAU,EAAEC,SAAS,CAAC,CAAC;EACnE,MAAMgB,GAAG,GAAGrB,WAAW,CAAEsB,WAAW,IAAK;IACrCZ,OAAO,CAACY,WAAW,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACD,GAAG,CAAC;AAChB;AAEA,SAASf,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}